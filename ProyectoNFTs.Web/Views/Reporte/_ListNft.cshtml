@model ProyectoNFTs.Application.DTOs.ClienteDTO
@using ProyectoNFTs.Application.DTOs

@{
    ViewData["Title"] = "NFTPropietarioReport";
}

<body id="MyBody2">
<div class="container">
    <div class="card">
        <div class="card-header">
            <h4>Reporte de Propietario del NFT</h4>
        </div>
        <div class="card-body">
            <form asp-controller="Reporte" asp-action="NFTPropietarioResultado" method="get"
                  data-ajax-method="POST"
                  data-ajax-begin="onBegin"
                  data-ajax-failure="onFailure"
                  data-ajax-success="onSuccess"
                  data-ajax-complete="onComplete">
                <div class="d-flex flex-row-reverse">
                    <button type="submit" class="btn btn-primary">
                        <span class="bi bi-search"></span> Consultar
                    </button>
                    <div style="margin-right:10px;">
                        <input type="text" name="descripcion" id="descripcion" class="form-control" autocomplete="off" placeholder="Nombre NFT" required />
                    </div>
                </div>
            </form>

            <div id="detalleCliente">
                <br />
                <div class="table-responsive">
                    @{
                        var nftId = ((IEnumerable<NftDTO>)ViewBag.nft).ToList();
                        var NFTDict = nftId.ToDictionary(c => c.IdNft, c => c.Imagen);
                        var NFTDictNombre = nftId.ToDictionary(c => c.IdNft, c => c.Nombre);
                    }

                    <table id="sortable" class="table table-striped table-hover table-responsive-md table-sm mt-3" style="border-radius: 6px; overflow: hidden; font-size:medium">
                        <thead style="background-color: black; color: #fff; cursor:pointer ; height: 50px;text-align: left; vertical-align: middle;">
                            <tr>
                                @if (Model.IdCliente != Guid.Empty)
                                {
                                    <th>@Html.DisplayNameFor(model => model.IdCliente)</th>
                                    <th>@Html.DisplayNameFor(model => model.Nombre)</th>
                                    <th>@Html.DisplayNameFor(model => model.Apellido1)</th>
                                    <th>@Html.DisplayNameFor(model => model.Apellido2)</th>
                                    <th>@Html.DisplayNameFor(model => model.Email)</th>
                                    <th style="text-align:center;">NFT</th>
                                    <th>Nombre</th>
                                }
                                else
                                {
                                    <th style="text-align:center;">Estado</th>
                                    <th style="text-align:center;">NFT</th>
                                    <th style="text-align:center;">Nombre</th>

                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.IdCliente == Guid.Empty)
                            {
                                <tr>
                                    <td style="text-align:center;color:red"><h5>Sin Propietario</h5></td>
                                    <td style="text-align:center">
                                        @{
                                            // Preguntamos si el diccionario tiene la imagen correspondiente al IDNFT
                                            if (NFTDict.ContainsKey(nftId.First().IdNft))
                                            {
                                                var imageBytes = NFTDict[nftId.First().IdNft];
                                                var imageBase64 = Convert.ToBase64String(imageBytes);
                                                <img src="data:image/png;base64,@imageBase64" alt="Imagen del NFT" width="200" height="200" />
                                            }
                                        }
                                    </td>
                                    <td>
                                        @{
                                            // Preguntamos si el diccionario tiene el nombre correspondiente al IDNFT
                                            if (NFTDictNombre.ContainsKey(nftId.First().IdNft))
                                            {
                                                var nombreNFT = NFTDictNombre[nftId.First().IdNft];
                                                <span>@nombreNFT</span>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td style="text-transform:uppercase;width:200px;">@Html.DisplayFor(model => model.IdCliente)</td>
                                    <td>@Html.DisplayFor(model => model.Nombre)</td>
                                    <td>@Html.DisplayFor(model => model.Apellido1)</td>
                                    <td>@Html.DisplayFor(model => model.Apellido2)</td>
                                    <td>@Html.DisplayFor(model => model.Email)</td>
                                    <td style="text-align:center">
                                        @{
                                            // Preguntamos si el diccionario tiene la imagen correspondiente al IDNFT
                                            if (NFTDict.ContainsKey(nftId.First().IdNft))
                                            {
                                                var imageBytes = NFTDict[nftId.First().IdNft];
                                                var imageBase64 = Convert.ToBase64String(imageBytes);
                                                <img src="data:image/png;base64,@imageBase64" alt="Imagen del NFT" width="200" height="200" />
                                            }
                                        }
                                    </td>
                                    <td>
                                        @{
                                            // Preguntamos si el diccionario tiene el nombre correspondiente al IDNFT
                                            if (NFTDictNombre.ContainsKey(nftId.First().IdNft))
                                            {
                                                var nombreNFT = NFTDictNombre[nftId.First().IdNft];
                                                <span>@nombreNFT</span>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>


                </div>
            </div>
        </div>
    </div>
</div>

<br />
<div id="contenedor"></div>
<div id="loader" class="xxxx"></div>
<br />
</body>
@section Scripts {
    <script>

        ///////////////////////////////////////////////////////////////////
        // Autocomplete Modal NftId search by Product Name
        ///////////////////////////////////////////////////////////////////
        $("#descripcion").autocomplete({
            source: function (request, response) {
                var id = $("#descripcion").val();

                //debugger;
                $("#NftNombre").html("")
                $.ajax({
                    type: "GET",
                    url: "/Nft/GetNftByName",
                    dataType: "json",
                    data: { filtro: id },
                    success: function (data) {
                        response($.map(data, function (item) {
                            //debugger;
                            return { label: item.nombre, value: item.descripcion, data: item };
                        }));
                    },
                    error: function (xhr, status, error) {
                        // xhr.requestText
                        // debugger;
                        console.log(error)
                        alert("Error: " + error + ", No Error: " + xhr.status);
                    },
                });
            },

        });
    </script>

    <script>
        $(document).ready(function () {
            // Verificar si hay un mensaje de error y mostrarlo en un toast
            var errorMessage = "@ViewBag.ErrorMessage";
            if (errorMessage) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: errorMessage
                });
            }

        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
